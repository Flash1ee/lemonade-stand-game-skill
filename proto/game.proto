syntax = "proto3";

package game;

option go_package = ".;game";

message Game {
  uint32 Id = 1;
}

message CreateResult {
  string Id = 1;
}

message Weather {
  string WeatherName = 1;
  int64 RainChance = 2;
}

message Balance {
  int64 Balance = 1;
}

message Nothing {
  bool Dummy = 1;
}

message GameID {
  string Id = 1;
}

message CalculateRequest {
  GameID Game = 1;
  int64 CupsAmount = 2;
  int64 IceAmount = 3;
  int64 StandAmount = 4;
  int64 Price = 5;
}

message CalculateResponse {
  int64 Balance = 1;
  int64 Day = 2;
  int64 Profit = 3;
}

message User {
  string username = 1;
}

message SaveResultMessage {
  GameID ID = 1;
  int64 Result = 2;
}

message ResultResponses {
  repeated Result results = 1;
}

message Result {
  string username = 1;
  int64 result = 2;
}

message Temperature {
  string Name = 1;
}

message Shop {
  GameID ID = 1;
  int64 Count = 2;
}

message ShopResult {
  Balance Balance = 1;
  int64 Error = 2;
}

message Tree {
  int64 Petals = 1;
  int64 Lives = 2;
}

message TreeDayResult {
  int64 WaterPetals = 1;
  int64 DiePetals = 2;
  bool IsRotting = 3;
  bool IsBeetles = 4;
}

service LemonadeGame {
  rpc Create(User) returns (CreateResult);
  rpc RandomWeather(GameID) returns (Weather);
  rpc GetBalance(GameID) returns (Balance);
  rpc Calculate(CalculateRequest) returns (CalculateResponse);
  rpc SaveResult(SaveResultMessage) returns (Nothing);
  rpc GetResult(GameID) returns (ResultResponses);
}

service BotanicalGardenGame {
  rpc Create(User) returns (CreateResult);
  rpc RandomWeather(GameID) returns (Weather);
  rpc GetBalance(GameID) returns (Balance);
  rpc Calculate(CalculateRequest) returns (CalculateResponse);
  rpc SaveResult(SaveResultMessage) returns (Nothing);
  rpc GetResult(GameID) returns (ResultResponses);
}

service TreeGame {
  rpc RandomWeather(GameID) returns (Weather);
  rpc RandomTemperature(GameID) returns (Temperature);
  rpc BuyWater(Shop) returns (ShopResult);
  rpc BuyWindShelter(Shop) returns (ShopResult);
  rpc BuyGreenHouse(Shop) returns (ShopResult);
  rpc BuySpraying(Shop) returns (ShopResult);
  rpc BuyMedicalKit(Shop) returns (ShopResult);
  rpc BuyAntiRotAgent(Shop) returns (ShopResult);
  rpc BuyFertilizer(Shop) returns (ShopResult);
  rpc TreeStat(GameID) returns (Tree);
  rpc DayResult(GameID) returns (TreeDayResult);

  rpc GetBalance(GameID) returns (Balance);
  rpc SaveResult(SaveResultMessage) returns (Nothing);
  rpc GetResult(GameID) returns (ResultResponses);
}